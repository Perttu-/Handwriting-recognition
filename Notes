 
Research matlab image processing functions and the difference in functionality with different amount of arguments. Try to understand it well.

Program example matlab program which does some preprocessing. Robust as possible: resizing, histogram equalization, binarization etc. Work for many file types and colors.

read and merit and demerit each method:
First International Conference on Emerging Trends in Engineering and Technology
A Survey of Methods and Strategies for Feature Extraction in
Handwritten Script Identification

-----------------------------------------------------------------------------------------

For regular photograph resolution should be preferably so that the stroke width is more than 3 px.
(for smaller resolution it is dificult also for humans to recognize the text)

Constraints:
-resolution & text size!
-Arguments for the binarization and opening

Preprocessing functionality:
-Noise reduction 
-Binarization (Done with sauvola method)
-Region analysis
-Cropping


optimal values for 5 first images in iam database (handwriting part only)
    p.wienerFilterSize = 15;
    p.sauvolaNeighbourhoodSize = 180;
    p.sauvolaThreshold = 0.3;
    p.morphClosingDiscSize = 3;
    p.strokeWidthThreshold = 0.6;
    p.skewCorrection = 0;
    aoiXExpansionAmount = 40;
    aoiYExpansionAmount = 60;
    areaRatioThreshold = 0.004;
    rlsaRowThreshold = 300;
    rlsaWordHorizontalThreshold = 30;
    rlsaWordVerticalThreshold = 30;

pasting this here dont mind me

    
    %bounding box method
%     for ii=1:aoi
%         img = imageStruct(ii).Image;
%         bboxes = regionprops(img,'BoundingBox');
%         expandedBBoxes = expandBBoxes(img,...
%                                       bboxes,...
%                                       wordXExpansionAmount,...
%                                       wordYExpansionAmount);
%         [wordBBoxes, ~] = combineOverlappingBoxes(expandedBBoxes, 0);
%         imageStruct(ii).BoundingBox = wordBBoxes;
%         
%     end
    
    %% word detection
%     %searching for spaces
%     %doesn't work for one word rows with separated characters
%     for ii=1:length(imageStruct)
%         spaces = imageStruct(ii).Space;
%         if ~isempty(spaces)
%              spaceLengths = spaces(:,2) - spaces(:,1);
% %             totalSpaceLength = sum(spaceLengths);
% %             spaceRatio = spaceLengths/totalSpaceLength;
% %             spaces((spaceRatio<spaceRatioThreshold),:)=[];
%             spaces(spaceLengths<spaceThreshold,:)=[];
%             imageStruct(ii).Space = spaces;
%         end
%     end
  
    %toc

    %% visualization
        
    
%     figure();
%     visualizeBBoxes(aoiStruct(1).Image, aoiStruct(1).RlsaBBoxes);
%       visualizeLayout(p.originalImage,layoutStruct);
%       figure();
%       visualizeBBoxes(aoiStruct(2).RowStruct(1).RowImage, aoiStruct(2).RowStruct(1).WordBoxes, 'g');
%     figure();
%     visualizeBBoxes(p.finalImage, combinedBBoxes);
    %figure(),imshow(imageStruct(1).Image),hold on, visboundaries(bwboundaries(imageStruct(1).RlsaImage,8,'noholes'));
    %visualizeImgStruct(imageStruct,[],0);



houg vis

    
%     imshow(image);
%     hold on;
%     x(1)=0;
%     y(1)=0;
%     x = zeros(numel(thetas)*numel(rhos),2);
%     y = zeros(numel(thetas)*numel(rhos),2);
%     xp = x;
%     yp = y;

    
%     for t = thetas
%         for r = rhos
%             x(2)=x(1)+r*cosd(t);
%             y(2)=y(1)+r*sind(t);
%             %plot(x(2),y(2),'r*');
%             %line(x,y);
%             t2 = t+90;
%             
% 
%         end
%     end

--------


    while 1
        [maxValue, maxIndex]=max(tmpAcc(:));
        [maxIRow, maxICol] = ind2sub(size(tmpAcc),maxIndex);
        [height,width]=size(tmpAcc);
        voterPoints = cell2mat(voterCoordCell(maxIRow-5:maxIRow+5,maxICol));
        voterNumbers = cell2mat(voterNumberCell(maxIRow-5:maxIRow+5,maxICol));
        voterAmount = length(voterPoints);
%         voterNumbers = zeros(1,voterAmount);
        lineNumber = 1;
        objectsInLine = [];
%         for ii = 1:voterAmount
%             voterNumbers(ii) = centroidImg(voterPoints(ii,1),voterPoints(ii,2));
%         end
        
        for ii = 1:length(subset1)
            objPartsInRow=sum(voterNumbers(:) == subset1(ii).Index);
            piecesAmount=subset1(ii).PiecesAmount;
            if objPartsInRow > 0 && piecesAmount/objPartsInRow >= 0.5
                objInRow = subset1(ii).Index;
                objectsInLine(end+1) = objInRow;
                %remove from voterCell the points assigned to a row 
                
            end
        end
        
        if contribution < n1
            break
        end
    end
------

%     figure(),
%     imshow(imadjust(mat2gray(accArr)),'XData',thetas,'YData',rhos,...
%        'InitialMagnification','fit');
%     title('Hough Transform');
%     xlabel('\theta'), ylabel('\rho');
%     axis on, axis normal;
%     colormap(hot);
%     drawnow